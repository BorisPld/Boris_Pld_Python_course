# TODO Написать 3 класса с документацией и аннотацией типов
#Создадим 3 класса описывающих людей, выступающих на сцене
class Сhoristers:
    def __init__(self, tenors: (list), sopranos: (list),
                 basses: (list),  altos: (list)):
        """
        Создание и подготовка к работе объекта "Бюджет семьи"

        :param tenors: тенорá
        :param sopranos: сопрано
        :param basses: басы
        :param altos: альты

        Примеры:
        >>> choristers_ = Сhoristers(['Миша_староста', 'кот_Борис', 'Артём_белый_день', 'Саша_инженер', 'Александэр', 'Ася'], ['Настя_феникс', 'Маша_сенсей', 'Ира', 'АннаТ', 'Серёжа_сопрано', 'Саша_сопрано'], ['Женя_бас', 'Женя_бар', 'Ду_се_мен', 'Саша_выше!'], ['Ксюша', 'Яся', 'Ари', 'Аня_сбер', 'Катя_где_пули??']) #Возник вопрос как записать это в несколько строк. Программа выдавала ошибку.
        """

        if not isinstance(tenors, list):
            raise TypeError("Тенора должны быть типа list")
        if not isinstance(sopranos, list):
            raise TypeError("Сопрано должны быть типа list")
        if not isinstance(basses, list):
            raise TypeError("Басы должны быть типа list")
        if not isinstance(altos, list):
            raise TypeError("Альты должны быть типа list")

    def why_is_it_so_noisy(self) -> int:
        """
        Функция которая подсчитывает количество пришедших теноров. Полагается, что все тенора дурачатся и галдёж создается именно ими

        :return: Число пришедших теноров

        Примеры:
        >>> choristers_ = Сhoristers(['Миша_староста', 'кот_Борис', 'Артём_белый_день', 'Саша_инженер', 'Александэр', 'Ася'], ['Настя_феникс', 'Маша_сенсей', 'Ира', 'АннаТ', 'Серёжа_сопрано', 'Саша_сопрано'], ['Женя_бас', 'Женя_бар', 'Ду_се_мен', 'Саша_выше!'], ['Ксюша', 'Яся', 'Ари', 'Аня_сбер', 'Катя_где_пули??'])
        >>> choristers_.why_is_it_so_noisy()
        """
        ...
    def tenors_win_flawless_victory(self) -> bool:
        """
        Функция которая проверяет являются ли ещё тенора самой многочисленной партией, возвращается True, если да, и False в противном случае

        :return: Значение логического высказывания: количество теноров превосходит количество людей любой другой партии хора

        Примеры:
        >>> choristers_ = Сhoristers(['Миша_староста', 'кот_Борис', 'Артём_белый_день', 'Саша_инженер', 'Александэр', 'Ася'], ['Настя_феникс', 'Маша_сенсей', 'Ира', 'АннаТ', 'Серёжа_сопрано', 'Саша_сопрано'], ['Женя_бас', 'Женя_бар', 'Ду_се_мен', 'Саша_выше!'], ['Ксюша', 'Яся', 'Ари', 'Аня_сбер', 'Катя_где_пули??'])
        >>> choristers_.tenors_win_flawless_victory()
        """
        ...


class Choirmasters:
    def __init__(self, number_of_choirmasters: int, names_of_сhoirmasters: str):
        """
        Создание и подготовка к работе объекта "Хормейтсеры". В хоре должен быть один хормейстер.
        По сути указание числа хормейстеров бессмысленно, поскольку в указании их имён всё равно допускается лишь одно имя, а не список имён.
        Введено искуственно для тренировки и чтобы запутать пользователя.
        :param number_of_choirmasters: количество хормейстеров хора
        :param names_of_сhoirmasters: имена хормейстеров хора

        Примеры:
        >>> сhoirmasters_ = Choirmasters(1, 'Регина Мусаева')
        """
        if not isinstance(number_of_choirmasters, int):
            raise TypeError("Количество хормейстеров должно быть целым числом. В хоре должен быть один хормейстер")
        if number_of_choirmasters <= 0:
            raise ValueError("Количество хормейстеров должно быть положительным числом. В хоре должен быть один хормейстер")
        if number_of_choirmasters > 1:
            raise ValueError("Количество хормейстеров в хоре не может быть большим единицы. В хоре должен быть один хормейстер")
        if not isinstance(names_of_сhoirmasters, str):
            raise TypeError("Имя хормейстера должно быть str")

    def presentation_of_the_choirmaster_to_the_public(self) -> None:
        """
        Функция, которая представляет публике хормействера. Возвращает None.

        :return: Функция возвращает None

        Примеры:
        >>> сhoirmasters_ = Choirmasters(1, 'Регина Мусаева')
        >>> сhoirmasters_.presentation_of_the_choirmaster_to_the_public()
        """
        ...

    def supremacy_of_the_choirmaster(self) -> (str, int):
        """
        Функция которая объясняет хору, что хормейтсер в нём главный и единственный. В поддтверждение функция выводит количество хормейстеров в хоре.

        :return: Высказывание <class 'str'> о важности хормейстера и их количество в хоре, равное еденице

        Примеры:
        >>> сhoirmasters_ = Choirmasters(1, 'Регина Мусаева')
        >>> сhoirmasters_.supremacy_of_the_choirmaster()
        """
        ...

class Soloist:
    def __init__(self, existence_of_solist: bool, name_of_solist: str, solo_part: str):
        """
        Создание и подготовка к работе объекта "Солист"

        :param existence_of_solist: Налоичие в хоре солиста
        :param name_of_solist: Имя солиста
        :param solo_part: Текст сольной партии солиста

        Примеры:
        >>> solist_ = Soloist(True, 'Iosif Piliev', '''Зорю бьют… из рук моихВетхий Данте выпадаетНа устах начатый стихНедочитанный затих —Дух далече улетает.Звук привычный, звук живой,Сколь ты часто раздавалсяТам, где тихо развивалсяЯ давнишнею порой.''')
        """

        if not isinstance(existence_of_solist, bool):
            raise TypeError("Наличие солиста должно опредляеться bool")
        if not isinstance(name_of_solist, str):
            raise TypeError("Имя солиста должно быть str")
        if not isinstance(solo_part, str):
            raise TypeError("Партия соло должна быть str")

    def will_there_be_a_solo(self) -> bool:
        """
        Функция, которая определяет, услышат ли зрители сольную партию

        :return: Будет ли сольная партия

        Примеры:
        >>> solist_ = Soloist(True, 'Iosif Piliev', '''Зорю бьют… из рук моихВетхий Данте выпадаетНа устах начатый стихНедочитанный затих —Дух далече улетает.Звук привычный, звук живой,Сколь ты часто раздавалсяТам, где тихо развивалсяЯ давнишнею порой.''')
        >>> solist_.will_there_be_a_solo()
        """
        ...

    def duration_of_the_solo(self) -> float | type(None):
        """
        Функция которая определяет продолжительность сольной партии солиста в секундах при заданном темпе роизведения (темп задаётся в строках в секунду)

        :return: Продолжительность сольной партии солиста или None если солиста нет

        Примеры:
        >>> solist_ = Soloist(True, 'Iosif Piliev', '''Зорю бьют… из рук моихВетхий Данте выпадаетНа устах начатый стихНедочитанный затих —Дух далече улетает.Звук привычный, звук живой,Сколь ты часто раздавалсяТам, где тихо развивалсяЯ давнишнею порой.''')
        >>> solist_.duration_of_the_solo()
        """
        ...

    def how_many_letters_are_in_the_solo(self) -> int | type(None):
        """
        Функция которая определяет солько букв спел солист. Учитываются только буквы русского, всех европейских алфавитов, а также суахили.
        Пробелы, знаки пунктуации и непечатаемые символы не учитываются.

        :return: Количество букв в соло

        Примеры:
        >>> solist_ = Soloist(True, 'Iosif Piliev', '''Зорю бьют… из рук моихВетхий Данте выпадаетНа устах начатый стихНедочитанный затих —Дух далече улетает.Звук привычный, звук живой,Сколь ты часто раздавалсяТам, где тихо развивалсяЯ давнишнею порой.''')
        >>> solist_.how_many_letters_are_in_the_solo()
        """


if __name__ == "__main__":
    import doctest

    doctest.testmod()  # TODO работоспособность экземпляров класса проверить с помощью doctest
    pass
